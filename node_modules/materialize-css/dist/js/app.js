// Initialize Materialize
M.AutoInit();

// Load Particles JS
particlesJS.load(
    "particles-js",
    "node_modules/materialize-css/dist/js/particles.json",
    () => console.log("Partciles.json loaded...")
  );

// Page Loader
window.addEventListener("load", () => {
    setTimeout(() => {
      const loader = document.querySelector(".loader");
      loader.className += " hidden";
    }, 3000);
})

// Fade in body on load 
window.addEventListener("load", () => {
  document.body.className += "fade-in";
})

// Item Fade In On Scroll
const items = document.querySelectorAll(".item");

const isInViewport = el => {
  const rect = el.getBoundingClientRect();
  return (
    rect.top >= 0 &&
    rect.left >= 0 &&
    rect.bottom <=
      (window.innerHeight || document.documentElement.clientHeight) &&
    rect.right <= (window.innerWidth || document.documentElement.clientWidth)
  );
};

const run = () =>
  items.forEach(item => {
    if (isInViewport(item)) {
      item.classList.add("show");
    } else {
      item.classList.remove("show");
    }
  });

// Events
window.addEventListener("load", run);
window.addEventListener("resize", run);
window.addEventListener("scroll", run);

// Type Writer Effect
const TypeWriter = function(txtElement, words, wait = 3000) {
  this.txtElement = txtElement;
  this.words = words;
  this.txt = "";
  this.wordIndex = 0;
  this.wait = parseInt(wait, 10);
  this.type();
  this.isDeleting = false;
};

// Type Method
TypeWriter.prototype.type = function() {
  const current = this.wordIndex % this.words.length;
  // Get Full Text of Current Word
  const fulltxt = this.words[current];

  // Check If deleting
  if (this.isDeleting) {
    // Remove character
    this.txt = fulltxt.substring(0, this.txt.length - 1);
  } else {
    // Add character
    this.txt = fulltxt.substring(0, this.txt.length + 1);
  }

  // Insert txt into element
  this.txtElement.innerHTML = `<span class="txt">${this.txt}</span>`;

  // Initial Type Speed
  let typeSpeed = 200;

  if (this.isDeleting) {
    typeSpeed /= 2;
  }

  // Check if word is complete
  if (!this.isDeleting && this.txt === fulltxt) {
    // Make pause at end
    typeSpeed = this.wait;
    // Set isDeleting to True
    this.isDeleting = true;
  } else if (this.isDeleting && this.txt === "") {
    this.isDeleting = false;
    // Move to next word
    this.wordIndex++;
    // Pause before next word
    typeSpeed = 800;
  }

  setTimeout(() => this.type(), typeSpeed);
};

// Init On DOM Load
document.addEventListener("DOMContentLoaded", init);

// Init App
function init() {
  const txtElement = document.querySelector(".txt-type");
  const words = JSON.parse(txtElement.getAttribute("data-words"));
  const wait = txtElement.getAttribute("data-wait");
  // Init Typewriter
  new TypeWriter(txtElement, words, wait);
}



// Scrollspy
document.addEventListener('DOMContentLoaded', function() {
  var elems = document.querySelectorAll('.scrollspy');
  var instances = M.ScrollSpy.init(elems, getActiveElement);
});


document.addEventListener('DOMContentLoaded', function() {
  var elems = document.querySelectorAll('.modal');
  var instances = M.Modal.init(elems, preventScrolling);

  var instance = M.Modal.getInstance(elem);

});